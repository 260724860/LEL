using DTO.Suppliers;
using DTO.SupplierUser;
using DTO.User;
using System;
using System.Collections.Generic;
using System.Data.Entity;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Service
{
    /// <summary>
    /// 供货商操作Service
    /// </summary>
    public class SuppliersService
    {
        /// <summary>
        /// 获取供货商列表
        /// </summary>
        /// <param name="KeyWords"></param>
        /// <returns></returns>
        public List<SupplierUserDto> GetSupplierList(string KeyWords)
        {
            using (Entities ctx = new Entities())
            {
                var temp = ctx.le_suppliers.Where(s => true);

                if (!string.IsNullOrEmpty(KeyWords))
                {
                    temp = temp.Where(s => s.Suppliers_Name.Contains(KeyWords)
                      || s.Suppliers_Name.Contains(KeyWords)
                      || s.Suppliers_MobilePhone.Contains(KeyWords));
                }

                temp = temp.OrderByDescending(s => s.Suppliers_LoginTime);
                var result = temp.Select(s => new SupplierUserDto
                {

                    SuppliersID = s.SuppliersID,
                    Suppliers_Name = s.Suppliers_Name

                }).ToList();

                return result;
            }
            return null;
        }

        /// <summary>
        /// 获取供货商列表
        /// </summary>
        /// <param name="options"></param>
        /// <param name="Count"></param>
        /// <returns></returns>
        public List<SupplierUserDto> GetSupplierUserList(UserSeachOptions options, out int Count)
        {
            using (Entities ctx = new Entities())
            {
                var temp = ctx.le_suppliers.Where(s => true);

                if (!string.IsNullOrEmpty(options.KeyWords))
                {
                    temp = temp.Where(s => s.Suppliers_Name.Contains(options.KeyWords)
                      || s.Suppliers_ResponPeople.Contains(options.KeyWords)
                      || s.Suppliers_MobilePhone.Contains(options.KeyWords));
                }
                if (options.BeginTime != null)
                {
                    temp = temp.Where(s => s.CreateTime > options.BeginTime.Value);
                }
                if (options.EndTime != null)
                {
                    temp = temp.Where(s => s.CreateTime < options.EndTime.Value);
                }

                temp = temp.OrderByDescending(s => s.Suppliers_LoginTime);
                Count = temp.Count();
                temp = temp.Skip(options.Offset).Take(options.Rows);
                var result = temp.Select(s => new SupplierUserDto
                {
                    SuppliersID = s.SuppliersID,
                    Suppliers_Name = s.Suppliers_Name,
                    Suppliers_ResponPeople = s.Suppliers_ResponPeople,
                    Suppliers_PassWord = s.Suppliers_PassWord,
                    Suppliers_Email = s.Suppliers_Email,
                    Suppliers_HeadImage = s.Suppliers_HeadImage,
                    Suppliers_MobilePhone = s.Suppliers_MobilePhone,
                    Suppliers_ImgA = s.Suppliers_ImgA,
                    Suppliers_ImgB = s.Suppliers_ImgB,
                    Suppliers_ImgC = s.Suppliers_ImgC,
                    Suppliers_ImgD = s.Suppliers_ImgD,
                    Suppliers_ImgE = s.Suppliers_ImgE,
                    Suppliers_Addr = s.Suppliers_Addr,
                    Suppliers_Status = s.Suppliers_Status,
                    Suppliers_LoginTime = s.Suppliers_LoginTime,
                    UpdateTime = s.UpdateTime,
                    CreateTime = s.CreateTime,

                }).ToList();

                return result;
            }
        }

        /// <summary>
        /// 修改供货商信息
        /// </summary>
        /// <param name="model"></param>
        /// <param name="msg"></param>
        /// <returns></returns>
        public bool EditSupplierUser(SupplierUserDto model,out string msg)
        {
            using (Entities ctx = new Entities())
            {
                var dto = ctx.le_suppliers.Where(s => s.SuppliersID == model.SuppliersID).FirstOrDefault();
                if (dto == null)
                {
                    msg = "该记录不存在";
                    return false;
                }

                dto.Suppliers_Name = model.Suppliers_Name;
                dto.Suppliers_ResponPeople = model.Suppliers_ResponPeople;
                dto.Suppliers_Addr = model.Suppliers_Addr;
                dto.Suppliers_Status = model.Suppliers_Status;
                dto.Suppliers_MobilePhone = model.Suppliers_MobilePhone;
                
                ctx.Entry<le_suppliers>(dto).State = EntityState.Modified;

                if (ctx.SaveChanges() > 0)
                {
                    msg = "SUCCESS";
                    return true;
                }

                msg = "修改失败";
                return false;
            }
        }

        /// <summary>
        /// 获取用户列表
        /// </summary>
        /// <param name="options"></param>
        /// <param name="Count"></param>
        /// <returns></returns>
        public List<UserDTO> GetUserList(UserSeachOptions options, out int Count)
        {
            using (Entities ctx = new Entities())
            {
                var temp = ctx.le_users.Where(s => true);

                if (!string.IsNullOrEmpty(options.KeyWords))
                {
                    temp = temp.Where(s => s.UsersNickname.Contains(options.KeyWords)
                      || s.UsersName.Contains(options.KeyWords)
                      || s.UsersMobilePhone.Contains(options.KeyWords)
                      || s.UsersAddress.Contains(options.KeyWords));
                }
                if (options.BeginTime != null)
                {
                    temp = temp.Where(s => s.CreateTime > options.BeginTime.Value);
                }
                if (options.EndTime != null)
                {
                    temp = temp.Where(s => s.CreateTime < options.EndTime.Value);
                }

                temp = temp.OrderByDescending(s => s.UsersLoginTime);
                Count = temp.Count();
                temp = temp.Skip(options.Offset).Take(options.Rows);
                var result = temp.Select(s => new UserDTO
                {
                    Address = s.UsersAddress,
                    status = s.UsersStatus,
                    Salt = s.Salt,
                    BusinessImg = s.UsersBusinessImg,
                    Email = s.UsersEmail,
                    HeadImage = s.UsersImage,
                    IDImgA = s.UsersIDImgA,
                    IDImgB = s.UsersIDImgB,
                    Mobile = s.UsersMobilePhone,
                    NickName = s.UsersNickname,
                    PWD = s.UsersPassWord,
                    TrueName = s.UsersName,
                    UserID = s.Users_ID,

                }).ToList();

                return result;
            }
            return null;
        }

        /// <summary>
        /// 修改用户资料
        /// </summary>
        /// <param name="dTO"></param>
        /// <param name="oneself"></param>
        /// <returns></returns>
        public bool UpdateUserInfo(UserDTO dTO, out string msg)
        {
            using (Entities ctx = new Entities())
            {
                var UserModel = ctx.le_users.Where(s => s.UsersMobilePhone == dTO.Mobile).FirstOrDefault();
                if (UserModel == null)
                {
                    msg = "该记录不存在";
                    return false;
                }
                UserModel.UsersAddress = dTO.Address;
                UserModel.UsersMobilePhone = dTO.Mobile;
                UserModel.UsersNickname = dTO.NickName;
                UserModel.UsersName = dTO.TrueName;
                UserModel.UsersStatus = dTO.status;

                ctx.Entry<le_users>(UserModel).State = EntityState.Modified;
                if (ctx.SaveChanges() > 0)
                {
                    msg = "SUCCESS";
                    return true;
                }
                msg = "修改失败";
                return false;
            }
        }
    }
}
